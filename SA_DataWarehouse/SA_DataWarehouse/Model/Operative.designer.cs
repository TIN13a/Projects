#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SA_DataWarehouse.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SM_Operative")]
	public partial class OperativeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertArticle_Category(Article_Category instance);
    partial void UpdateArticle_Category(Article_Category instance);
    partial void DeleteArticle_Category(Article_Category instance);
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertBranch_Article(Branch_Article instance);
    partial void UpdateBranch_Article(Branch_Article instance);
    partial void DeleteBranch_Article(Branch_Article instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertSeller(Seller instance);
    partial void UpdateSeller(Seller instance);
    partial void DeleteSeller(Seller instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    #endregion
		
		public OperativeDataContext() : 
				base(global::SA_DataWarehouse.Properties.Settings.Default.SM_OperativeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OperativeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OperativeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OperativeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OperativeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Article
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Article_Category> Article_Category
		{
			get
			{
				return this.GetTable<Article_Category>();
			}
		}
		
		public System.Data.Linq.Table<Branch> Branch
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<Branch_Article> Branch_Article
		{
			get
			{
				return this.GetTable<Branch_Article>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Seller> Seller
		{
			get
			{
				return this.GetTable<Seller>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transaction
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<int> _quantity;
		
		private EntitySet<Article_Category> _Article_Category;
		
		private EntitySet<Branch_Article> _Branch_Article;
		
		private EntitySet<Transaction> _Transaction;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public Article()
		{
			this._Article_Category = new EntitySet<Article_Category>(new Action<Article_Category>(this.attach_Article_Category), new Action<Article_Category>(this.detach_Article_Category));
			this._Branch_Article = new EntitySet<Branch_Article>(new Action<Branch_Article>(this.attach_Branch_Article), new Action<Branch_Article>(this.detach_Branch_Article));
			this._Transaction = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transaction), new Action<Transaction>(this.detach_Transaction));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Article_Category", Storage="_Article_Category", ThisKey="id", OtherKey="fk_article")]
		public EntitySet<Article_Category> Article_Category
		{
			get
			{
				return this._Article_Category;
			}
			set
			{
				this._Article_Category.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Branch_Article", Storage="_Branch_Article", ThisKey="id", OtherKey="fk_article")]
		public EntitySet<Branch_Article> Branch_Article
		{
			get
			{
				return this._Branch_Article;
			}
			set
			{
				this._Branch_Article.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Transaction", Storage="_Transaction", ThisKey="id", OtherKey="fk_article")]
		public EntitySet<Transaction> Transaction
		{
			get
			{
				return this._Transaction;
			}
			set
			{
				this._Transaction.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Article_Category(Article_Category entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Article_Category(Article_Category entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_Branch_Article(Branch_Article entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Branch_Article(Branch_Article entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_Transaction(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Transaction(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article_Category")]
	public partial class Article_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fk_article;
		
		private int _fk_category;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Category> _Category;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfk_articleChanging(int value);
    partial void Onfk_articleChanged();
    partial void Onfk_categoryChanging(int value);
    partial void Onfk_categoryChanged();
    #endregion
		
		public Article_Category()
		{
			this._Article = default(EntityRef<Article>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_article", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fk_article
		{
			get
			{
				return this._fk_article;
			}
			set
			{
				if ((this._fk_article != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_articleChanging(value);
					this.SendPropertyChanging();
					this._fk_article = value;
					this.SendPropertyChanged("fk_article");
					this.Onfk_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_category", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fk_category
		{
			get
			{
				return this._fk_category;
			}
			set
			{
				if ((this._fk_category != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_categoryChanging(value);
					this.SendPropertyChanging();
					this._fk_category = value;
					this.SendPropertyChanged("fk_category");
					this.Onfk_categoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Article_Category", Storage="_Article", ThisKey="fk_article", OtherKey="id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Article_Category.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Article_Category.Add(this);
						this._fk_article = value.id;
					}
					else
					{
						this._fk_article = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Article_Category", Storage="_Category", ThisKey="fk_category", OtherKey="id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Article_Category.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Article_Category.Add(this);
						this._fk_category = value.id;
					}
					else
					{
						this._fk_category = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _location;
		
		private EntitySet<Branch_Article> _Branch_Article;
		
		private EntitySet<Transaction> _Transaction;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Branch()
		{
			this._Branch_Article = new EntitySet<Branch_Article>(new Action<Branch_Article>(this.attach_Branch_Article), new Action<Branch_Article>(this.detach_Branch_Article));
			this._Transaction = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transaction), new Action<Transaction>(this.detach_Transaction));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Branch_Article", Storage="_Branch_Article", ThisKey="id", OtherKey="fk_branch")]
		public EntitySet<Branch_Article> Branch_Article
		{
			get
			{
				return this._Branch_Article;
			}
			set
			{
				this._Branch_Article.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Transaction", Storage="_Transaction", ThisKey="id", OtherKey="fk_branch")]
		public EntitySet<Transaction> Transaction
		{
			get
			{
				return this._Transaction;
			}
			set
			{
				this._Transaction.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Branch_Article(Branch_Article entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Branch_Article(Branch_Article entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Transaction(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Transaction(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch_Article")]
	public partial class Branch_Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fk_branch;
		
		private int _fk_article;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Branch> _Branch;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfk_branchChanging(int value);
    partial void Onfk_branchChanged();
    partial void Onfk_articleChanging(int value);
    partial void Onfk_articleChanged();
    #endregion
		
		public Branch_Article()
		{
			this._Article = default(EntityRef<Article>);
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_branch", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fk_branch
		{
			get
			{
				return this._fk_branch;
			}
			set
			{
				if ((this._fk_branch != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_branchChanging(value);
					this.SendPropertyChanging();
					this._fk_branch = value;
					this.SendPropertyChanged("fk_branch");
					this.Onfk_branchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_article", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fk_article
		{
			get
			{
				return this._fk_article;
			}
			set
			{
				if ((this._fk_article != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_articleChanging(value);
					this.SendPropertyChanging();
					this._fk_article = value;
					this.SendPropertyChanged("fk_article");
					this.Onfk_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Branch_Article", Storage="_Article", ThisKey="fk_article", OtherKey="id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Branch_Article.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Branch_Article.Add(this);
						this._fk_article = value.id;
					}
					else
					{
						this._fk_article = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Branch_Article", Storage="_Branch", ThisKey="fk_branch", OtherKey="id", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Branch_Article.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Branch_Article.Add(this);
						this._fk_branch = value.id;
					}
					else
					{
						this._fk_branch = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Article_Category> _Article_Category;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Category()
		{
			this._Article_Category = new EntitySet<Article_Category>(new Action<Article_Category>(this.attach_Article_Category), new Action<Article_Category>(this.detach_Article_Category));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Article_Category", Storage="_Article_Category", ThisKey="id", OtherKey="fk_category")]
		public EntitySet<Article_Category> Article_Category
		{
			get
			{
				return this._Article_Category;
			}
			set
			{
				this._Article_Category.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Article_Category(Article_Category entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Article_Category(Article_Category entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seller")]
	public partial class Seller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _surename;
		
		private string _name;
		
		private string _adress;
		
		private string _zip;
		
		private string _location;
		
		private EntitySet<Transaction> _Transaction;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsurenameChanging(string value);
    partial void OnsurenameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnadressChanging(string value);
    partial void OnadressChanged();
    partial void OnzipChanging(string value);
    partial void OnzipChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Seller()
		{
			this._Transaction = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transaction), new Action<Transaction>(this.detach_Transaction));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surename", DbType="VarChar(250)")]
		public string surename
		{
			get
			{
				return this._surename;
			}
			set
			{
				if ((this._surename != value))
				{
					this.OnsurenameChanging(value);
					this.SendPropertyChanging();
					this._surename = value;
					this.SendPropertyChanged("surename");
					this.OnsurenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adress", DbType="VarChar(259)")]
		public string adress
		{
			get
			{
				return this._adress;
			}
			set
			{
				if ((this._adress != value))
				{
					this.OnadressChanging(value);
					this.SendPropertyChanging();
					this._adress = value;
					this.SendPropertyChanged("adress");
					this.OnadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zip", DbType="VarChar(250)")]
		public string zip
		{
			get
			{
				return this._zip;
			}
			set
			{
				if ((this._zip != value))
				{
					this.OnzipChanging(value);
					this.SendPropertyChanging();
					this._zip = value;
					this.SendPropertyChanged("zip");
					this.OnzipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(250)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_Transaction", Storage="_Transaction", ThisKey="id", OtherKey="fk_customer")]
		public EntitySet<Transaction> Transaction
		{
			get
			{
				return this._Transaction;
			}
			set
			{
				this._Transaction.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transaction(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Seller = this;
		}
		
		private void detach_Transaction(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Seller = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _count;
		
		private System.Nullable<double> _brutto;
		
		private System.Nullable<double> _netto;
		
		private System.DateTime _date;
		
		private int _fk_branch;
		
		private int _fk_customer;
		
		private int _fk_article;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Seller> _Seller;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncountChanging(int value);
    partial void OncountChanged();
    partial void OnbruttoChanging(System.Nullable<double> value);
    partial void OnbruttoChanged();
    partial void OnnettoChanging(System.Nullable<double> value);
    partial void OnnettoChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void Onfk_branchChanging(int value);
    partial void Onfk_branchChanged();
    partial void Onfk_customerChanging(int value);
    partial void Onfk_customerChanged();
    partial void Onfk_articleChanging(int value);
    partial void Onfk_articleChanged();
    #endregion
		
		public Transaction()
		{
			this._Article = default(EntityRef<Article>);
			this._Branch = default(EntityRef<Branch>);
			this._Seller = default(EntityRef<Seller>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int NOT NULL")]
		public int count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brutto", DbType="Float")]
		public System.Nullable<double> brutto
		{
			get
			{
				return this._brutto;
			}
			set
			{
				if ((this._brutto != value))
				{
					this.OnbruttoChanging(value);
					this.SendPropertyChanging();
					this._brutto = value;
					this.SendPropertyChanged("brutto");
					this.OnbruttoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_netto", DbType="Float")]
		public System.Nullable<double> netto
		{
			get
			{
				return this._netto;
			}
			set
			{
				if ((this._netto != value))
				{
					this.OnnettoChanging(value);
					this.SendPropertyChanging();
					this._netto = value;
					this.SendPropertyChanged("netto");
					this.OnnettoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_branch", DbType="Int NOT NULL")]
		public int fk_branch
		{
			get
			{
				return this._fk_branch;
			}
			set
			{
				if ((this._fk_branch != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_branchChanging(value);
					this.SendPropertyChanging();
					this._fk_branch = value;
					this.SendPropertyChanged("fk_branch");
					this.Onfk_branchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_customer", DbType="Int NOT NULL")]
		public int fk_customer
		{
			get
			{
				return this._fk_customer;
			}
			set
			{
				if ((this._fk_customer != value))
				{
					if (this._Seller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_customerChanging(value);
					this.SendPropertyChanging();
					this._fk_customer = value;
					this.SendPropertyChanged("fk_customer");
					this.Onfk_customerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_article", DbType="Int NOT NULL")]
		public int fk_article
		{
			get
			{
				return this._fk_article;
			}
			set
			{
				if ((this._fk_article != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_articleChanging(value);
					this.SendPropertyChanging();
					this._fk_article = value;
					this.SendPropertyChanged("fk_article");
					this.Onfk_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Transaction", Storage="_Article", ThisKey="fk_article", OtherKey="id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Transaction.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Transaction.Add(this);
						this._fk_article = value.id;
					}
					else
					{
						this._fk_article = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Transaction", Storage="_Branch", ThisKey="fk_branch", OtherKey="id", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Transaction.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Transaction.Add(this);
						this._fk_branch = value.id;
					}
					else
					{
						this._fk_branch = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_Transaction", Storage="_Seller", ThisKey="fk_customer", OtherKey="id", IsForeignKey=true)]
		public Seller Seller
		{
			get
			{
				return this._Seller.Entity;
			}
			set
			{
				Seller previousValue = this._Seller.Entity;
				if (((previousValue != value) 
							|| (this._Seller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seller.Entity = null;
						previousValue.Transaction.Remove(this);
					}
					this._Seller.Entity = value;
					if ((value != null))
					{
						value.Transaction.Add(this);
						this._fk_customer = value.id;
					}
					else
					{
						this._fk_customer = default(int);
					}
					this.SendPropertyChanged("Seller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
